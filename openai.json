{
    "openapi": "3.0.2",
    "info": {
      "title": "Enterprise Compliance API",
      "version": "1.1.5"
    },
    "servers": [
      {
        "url": "https://api.chatgpt.com/v1"
      }
    ],
    "components": {
      "schemas": {
        "workspace_id": {
          "type": "string",
          "format": "uuid",
          "example": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
        },
        "user_id": {
          "type": "string",
          "description": "The auth user ID for a user.",
          "example": "user-XXXXXXXXXXXXXXXXXXXXXXXX"
        },
        "gpt_id": {
          "type": "string",
          "description": "The ID of a GPT.",
          "example": "g-XXXXXXXXX"
        },
        "project_id": {
          "type": "string",
          "description": "The ID of a Project.",
          "format": "uuid",
          "example": "g-p-XXXXXXXXX"
        },
        "timestamp": {
          "type": "number",
          "description": "A Unix timestamp.",
          "example": 1692158096.299021
        },
        "file_format": {
          "type": "string",
          "enum": [
            "url",
            "id"
          ],
          "default": "url"
        },
        "gpt_file_format": {
          "allOf": [
            {
              "$ref": "#/components/schemas/file_format"
            }
          ],
          "description": "File format for files in conversations or GPTs.\n\nIf `url`, returned files follow the `ConversationFile` or `GPTFile` schema.\n\nIf `id`, returned files follow the `ConversationFileInfo` or `GPTFileInfo` schema.\n"
        },
        "conversation_file_format": {
          "allOf": [
            {
              "$ref": "#/components/schemas/file_format"
            }
          ],
          "description": "File format for files in conversations.\n\nIf `url`, returned files follow the `ConversationFile` schema.\n\nIf `id`, returned files follow the `ConversationFileInfo` schema.\n"
        },
        "project_file_format": {
          "allOf": [
            {
              "$ref": "#/components/schemas/file_format"
            }
          ],
          "description": "File format for files in Projects.\n\nIf `url`, returned files follow the `ProjectFile` schema.\n\nIf `id`, returned files follow the `ProjectFileInfo` schema.\n"
        },
        "GenericList": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "list"
              ]
            },
            "last_id": {
              "type": "string",
              "description": "The ID of the last object in the list."
            },
            "has_more": {
              "type": "boolean",
              "description": "Indicates whether there are more objects to list."
            },
            "data": {
              "type": "array",
              "description": "The list of objects.",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "WorkspaceUser": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.user"
              ]
            },
            "id": {
              "$ref": "#/components/schemas/user_id"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "The email of the user."
            },
            "name": {
              "type": "string",
              "description": "The name of the user."
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the user creation time."
            },
            "role": {
              "type": "string",
              "description": "The role of the user",
              "enum": [
                "account-owner",
                "account-admin",
                "standard-user"
              ]
            },
            "status": {
              "type": "string",
              "description": "The status of the user.",
              "enum": [
                "active",
                "inactive"
              ]
            }
          }
        },
        "GPTConfig": {
          "type": "object",
          "description": "A GPT configuration.  This describes a user-created version of the GPT, including instructions, description, name, and other details defining the GPT's behavior.",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.gpt.configuration"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the configuration.  Uniquely identifies a GPT configuration.",
              "example": "gzm_cnf_xxxxxxxxxxxxxxxxxxxxxxxx"
            },
            "name": {
              "type": "string",
              "description": "The GPT name."
            },
            "description": {
              "type": "string",
              "description": "The GPT description."
            },
            "categories": {
              "type": "array",
              "description": "The list of categories that the builder chose to publish the GPT under.",
              "items": {
                "type": "string"
              }
            },
            "conversation_starters": {
              "type": "array",
              "description": "The list of conversation starters.",
              "items": {
                "type": "string"
              }
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the configuration creation time.  This will not be provided for 3rd party GPTs."
            },
            "instructions": {
              "type": "string",
              "description": "Creator-provided instructions on how the GPT should behave.  This will not be provided for 3rd party GPTs."
            },
            "version_author": {
              "$ref": "#/components/schemas/GPTVersionAuthor",
              "description": "The user that published this version of the GPT.",
              "nullable": true
            },
            "files": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GPTFileList"
                }
              ],
              "description": "The list of files in the GPT configuration.  This will not be provided for 3rd party GPTs.  Note that this list includes a has_more attribute, but that attribute will always be false.  The list is complete."
            },
            "tools": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GPTToolList"
                }
              ],
              "description": "The list of tools in the GPT configuration."
            }
          }
        },
        "GPTConfigList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of GPTConfig(s).",
                  "items": {
                    "$ref": "#/components/schemas/GPTConfig"
                  }
                }
              }
            }
          ]
        },
        "GPTTool": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The tool name.",
              "enum": [
                "code_interpreter",
                "browser",
                "dall-e",
                "memory",
                "custom_action"
              ]
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the tool creation time."
            },
            "action_domain": {
              "type": "string",
              "description": "The internet domain for the custom action. Only provided for `custom_action` tool type."
            },
            "action_openapi_raw": {
              "type": "string",
              "description": "The schema of the custom action. Only provided for `custom_action` tool type."
            },
            "action_privacy_policy_url": {
              "type": "string",
              "description": "The privacy policy url of the custom action. Only provided for `custom_action` tool type."
            },
            "auth_type": {
              "type": "string",
              "description": "The authentication type of the custom action. Only provided for `custom_action` tool type."
            }
          }
        },
        "GPTToolList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of tools.",
                  "items": {
                    "$ref": "#/components/schemas/GPTTool"
                  }
                }
              }
            }
          ]
        },
        "BaseFile": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the file.",
              "example": "file-XXXXXXXXXXXXXXXXXXXXXXXX"
            },
            "name": {
              "type": "string",
              "description": "The name of the file."
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the file creation time."
            },
            "download_url": {
              "type": "string",
              "nullable": true,
              "description": "The URL to download the file.  The URL expires after 1 hour.  If the file has expired, the `created_at` and `download_url` will be `null`.",
              "format": "url"
            }
          }
        },
        "GPTFile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseFile"
            },
            {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "compliance.workspace.gpt.file"
                  ]
                }
              }
            }
          ]
        },
        "GPTFileInfo": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the file.",
              "example": "file-XXXXXXXXXXXXXXXXXXXXXXXX"
            },
            "name": {
              "type": "string",
              "description": "The name of the file."
            },
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.gpt.file_info"
              ]
            }
          }
        },
        "GPTFileList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of files.",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/GPTFile"
                      },
                      {
                        "$ref": "#/components/schemas/GPTFileInfo"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "GPTVersionAuthor": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.gpt.version_author"
              ]
            },
            "id": {
              "type": "string",
              "description": "The auth user ID of the version author."
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "The email address of the version author."
            }
          }
        },
        "ConversationFile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseFile"
            },
            {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "compliance.workspace.conversation.message.file"
                  ]
                }
              }
            }
          ]
        },
        "ConversationFileInfo": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the file.",
              "example": "file-XXXXXXXXXXXXXXXXXXXXXXXX"
            },
            "name": {
              "type": "string",
              "description": "The name of the file."
            },
            "user_id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/user_id"
                }
              ],
              "description": "The auth user ID of the user who owns the file."
            },
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.conversation.message.file_info"
              ]
            }
          }
        },
        "ConversationFileList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of files.",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ConversationFile"
                      },
                      {
                        "$ref": "#/components/schemas/ConversationFileInfo"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "MessageAuthor": {
          "type": "object",
          "description": "The author of the message.",
          "properties": {
            "object": {
              "type": "string",
              "description": "The object type."
            },
            "role": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "system",
                "tool"
              ]
            },
            "tool_name": {
              "type": "string",
              "description": "The name of the tool used to generate the message, if applicable.  Unsupported tools will have a null value.",
              "nullable": true,
              "enum": [
                "python",
                "browser",
                "dalle"
              ]
            }
          }
        },
        "MessageContent": {
          "type": "object",
          "description": "The content of the message. This value is null for messages generated through unsupported tools.",
          "properties": {
            "object": {
              "type": "string",
              "description": "The object type."
            },
            "type": {
              "type": "string",
              "description": "The type of the message content."
            },
            "value": {
              "type": "string",
              "description": "The value of the message content."
            },
            "annotations": {
              "type": "array",
              "description": "The list of annotations in the message content.",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "url_citation"
                    ]
                  },
                  "urls": {
                    "type": "array",
                    "description": "The list of URLs in the annotation.",
                    "items": {
                      "type": "string",
                      "format": "url"
                    }
                  }
                }
              }
            }
          }
        },
        "Message": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.conversation.message"
              ]
            },
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the message."
            },
            "parent_id": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the parent message."
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "nullable": true
            },
            "gpt_id": {
              "type": "string",
              "nullable": true,
              "description": "The ID of the GPT used to generate the message, if applicable.  If the message was generated by a default model (not a custom GPT), this will be `null`."
            },
            "project_id": {
              "type": "string",
              "nullable": true,
              "description": "The ID of the project used to generate the message, if applicable.  If the message was generated by a default model (not a custom GPT), this will be `null`."
            },
            "author": {
              "$ref": "#/components/schemas/MessageAuthor"
            },
            "content": {
              "$ref": "#/components/schemas/MessageContent"
            },
            "files": {
              "$ref": "#/components/schemas/ConversationFileList"
            }
          }
        },
        "MessageList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of messages.",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          ]
        },
        "Conversation": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.conversation"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the conversation.",
              "format": "uuid"
            },
            "workspace_id": {
              "$ref": "#/components/schemas/workspace_id"
            },
            "user_id": {
              "$ref": "#/components/schemas/user_id"
            },
            "user_email": {
              "type": "string",
              "format": "email",
              "description": "The email of the user."
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the conversation creation time."
            },
            "last_active_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the last conversation activity.\nThis is updated when one of the following actions occur:\n\n1. A message is added to the conversation.\n2. A title is automatically generated for the conversation.\n\n*Note: The ordering of conversations based on update time does not necessarily match `last_active_at`.\nConversations can be updated without being active,\nsuch as when migrated from a personal workspace.\nAt this time, last update time is not exposed as a field.*\n"
            },
            "title": {
              "type": "string",
              "description": "The title of the conversation."
            },
            "messages": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessageList"
                }
              ],
              "description": "The list of messages in the conversation."
            }
          }
        },
        "GPT": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.gpt"
              ]
            },
            "id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/gpt_id"
                }
              ]
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the GPT creation time.  This is not provided for 3rd party GPTs."
            },
            "owner_id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/user_id"
                }
              ],
              "description": "The auth user ID of the GPT owner.  This is not provided for 3rd party GPTs."
            },
            "owner_email": {
              "type": "string",
              "format": "email",
              "description": "The email of the GPT owner.  This is not provided for 3rd party GPTs."
            },
            "builder_name": {
              "type": "string",
              "description": "The GPT builder name as displayed on ChatGPT.",
              "example": "Community Builder"
            },
            "sharing": {
              "type": "object",
              "description": "The sharing level of the GPT.  This is not provided for 3rd party GPTs.",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "compliance.workspace.gpt.sharing"
                  ]
                },
                "visibility": {
                  "type": "string",
                  "description": "The visibility of the GPT.",
                  "enum": [
                    "invite-only",
                    "workspace-with-link",
                    "workspace",
                    "anyone-with-link",
                    "gpt-store"
                  ]
                },
                "permissions": {
                  "type": "object",
                  "description": "The permissions of the GPT.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "compliance.workspace.gpt.permissions"
                      ]
                    },
                    "can_read": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can chat with the GPT."
                    },
                    "can_view_config": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can view the configurations of the GPT."
                    },
                    "can_write": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can edit the GPT."
                    }
                  }
                },
                "recipients": {
                  "type": "array",
                  "description": "The list of sharing recipients.",
                  "items": {
                    "type": "object",
                    "description": "A user that a GPT is shared with.",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "compliance.workspace.gpt.shared_user"
                        ]
                      },
                      "id": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/user_id"
                          }
                        ],
                        "description": "The auth user ID of the recipient."
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email of the recipient."
                      },
                      "permissions": {
                        "type": "object",
                        "description": "The permissions of the GPT.",
                        "properties": {
                          "object": {
                            "type": "string",
                            "enum": [
                              "compliance.workspace.gpt.permissions"
                            ]
                          },
                          "can_read": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can chat with the GPT."
                          },
                          "can_view_config": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can view the configurations of the GPT."
                          },
                          "can_write": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can edit the GPT."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "latest_config": {
              "$ref": "#/components/schemas/GPTConfigList"
            }
          }
        },
        "Memory": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.user.memory"
              ]
            },
            "id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/user_id"
                }
              ],
              "description": "The auth user ID of the user who owns the memory."
            },
            "memory_contexts": {
              "type": "array",
              "description": "The list of memory contexts.",
              "items": {
                "$ref": "#/components/schemas/MemoryContext"
              }
            }
          }
        },
        "MemoryContext": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.user.memory.context"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the memory context.  Note that this could be a user ID if it refers to the user's primary memory context."
            },
            "memory_entries": {
              "type": "array",
              "description": "The list of memory entries.",
              "items": {
                "$ref": "#/components/schemas/MemoryEntry"
              }
            }
          }
        },
        "MemoryEntry": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.user.memory.context.entry"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the memory entry."
            },
            "content": {
              "type": "string",
              "description": "The content of the memory entry."
            },
            "updated_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the memory entry update time."
            }
          }
        },
        "Canvas": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the canvas."
            }
          }
        },
        "CanvasComment": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "comment"
              ],
              "description": "The type of the object."
            },
            "id": {
              "type": "string",
              "description": "The ID of the comment."
            },
            "start": {
              "type": "integer",
              "description": "The start position of the comment."
            },
            "end": {
              "type": "integer",
              "description": "The end position of the comment."
            },
            "content": {
              "type": "string",
              "description": "The content of the comment."
            }
          }
        },
        "VersionContent": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "The content of the canvas version."
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the version was updated."
            },
            "version": {
              "type": "integer",
              "description": "The version number."
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the version."
            },
            "comments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CanvasComment"
              },
              "description": "The list of comments in the version."
            }
          }
        },
        "ListCanvasVersionContent": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "list"
              ],
              "description": "The object type."
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VersionContent"
              },
              "description": "The list of canvas versions."
            },
            "last_version": {
              "type": "integer",
              "nullable": true,
              "description": "The version number of the last version in the list."
            },
            "has_more": {
              "type": "boolean",
              "description": "Indicates whether there are more versions to list."
            }
          }
        },
        "CanvasContent": {
          "type": "object",
          "properties": {
            "textdoc_id": {
              "type": "string",
              "description": "The ID of the canvas document."
            },
            "textdoc_type": {
              "type": "string",
              "description": "The type of the canvas document."
            },
            "version_contents": {
              "$ref": "#/components/schemas/ListCanvasVersionContent",
              "description": "The list of version contents."
            }
          }
        },
        "CanvasListResponse": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "list"
              ],
              "description": "The object type."
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Canvas"
              },
              "description": "The list of canvases."
            },
            "last_id": {
              "type": "string",
              "description": "The ID of the last canvas in the list."
            },
            "has_more": {
              "type": "boolean",
              "description": "Indicates whether there are more canvases to list."
            }
          }
        },
        "Recording": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the recording."
            },
            "start": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp when the recording started."
            },
            "end": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp when the recording ended."
            },
            "conversation_id": {
              "type": "string",
              "description": "The ID of the conversation associated with the recording."
            },
            "canvas_id": {
              "type": "string",
              "nullable": true,
              "description": "The ID of the canvas associated with the recording."
            }
          }
        },
        "RecordingListResponse": {
          "description": "A list of recordings.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "type": "string",
                    "description": "The ID of the last recording in the list."
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more recordings to list."
                  },
                  "cursor": {
                    "type": "string",
                    "nullable": true,
                    "description": "Cursor for fetching the next page of results."
                  },
                  "data": {
                    "type": "array",
                    "description": "The list of recordings.",
                    "items": {
                      "$ref": "#/components/schemas/Recording"
                    }
                  }
                }
              }
            }
          }
        },
        "TranscriptDownloadResponse": {
          "type": "object",
          "description": "A response containing the recording transcript and optional summary.",
          "properties": {
            "version": {
              "type": "string",
              "enum": [
                "1.0"
              ],
              "description": "The version of the response schema."
            },
            "recording_id": {
              "type": "string",
              "description": "The recording ID."
            },
            "transcript": {
              "type": "string",
              "description": "The full transcript text."
            },
            "summary": {
              "type": "string",
              "nullable": true,
              "description": "Optional summary of the transcript."
            }
          }
        },
        "ExportAutomation": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique automation identifier."
            },
            "title": {
              "type": "string",
              "description": "The title of the automation."
            },
            "schedule": {
              "type": "string",
              "description": "The automation schedule."
            },
            "is_enabled": {
              "type": "boolean",
              "description": "Indicates if the automation is enabled."
            },
            "prompt": {
              "type": "string",
              "description": "The automation prompt."
            }
          },
          "required": [
            "id",
            "title",
            "schedule",
            "is_enabled",
            "prompt"
          ]
        },
        "ProjectFile": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseFile"
            },
            {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "compliance.workspace.project.file"
                  ]
                }
              }
            }
          ]
        },
        "ProjectFileInfo": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the file."
            },
            "name": {
              "type": "string",
              "description": "The name of the file."
            },
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.project.file_info"
              ]
            }
          }
        },
        "ProjectFileList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of files in the Project configuration.",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ProjectFile"
                      },
                      {
                        "$ref": "#/components/schemas/ProjectFileInfo"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "ProjectTool": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The tool name.",
              "enum": [
                "code_interpreter",
                "browser",
                "dall-e",
                "memory",
                "custom_action"
              ]
            },
            "created_at": {
              "type": "number",
              "description": "The Unix timestamp of when the tool was added."
            },
            "action_domain": {
              "type": "string",
              "description": "The internet domain for the custom action (only if `custom_action`)."
            },
            "action_openapi_raw": {
              "type": "string",
              "description": "The schema for the custom action (only if `custom_action`)."
            },
            "action_privacy_policy_url": {
              "type": "string",
              "description": "The privacy policy URL (only if `custom_action`)."
            }
          }
        },
        "ProjectToolList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of tools in the Project configuration.",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTool"
                  }
                }
              }
            }
          ]
        },
        "ProjectConfig": {
          "type": "object",
          "description": "A Project configuration. This describes a user-created version of a Project.",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.project.configuration"
              ]
            },
            "id": {
              "type": "string",
              "description": "The ID of the configuration. Uniquely identifies a Project configuration.",
              "example": "pr_cnf_xxxxxxxxxxxxxxxxxxxxxxxx"
            },
            "name": {
              "type": "string",
              "description": "The Project name."
            },
            "description": {
              "type": "string",
              "description": "The Project description."
            },
            "categories": {
              "type": "array",
              "description": "The list of categories that the builder chose to publish the Project under.",
              "items": {
                "type": "string"
              }
            },
            "conversation_starters": {
              "type": "array",
              "description": "The list of conversation starters.",
              "items": {
                "type": "string"
              }
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the configuration creation time."
            },
            "instructions": {
              "type": "string",
              "description": "Creator-provided instructions on how the Project should behave."
            },
            "files": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectFileList"
                }
              ],
              "description": "The list of files in the Project configuration. Note that `has_more` is always false.\nThe list is complete.\n"
            },
            "tools": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectToolList"
                }
              ],
              "description": "The list of tools in the Project configuration."
            }
          }
        },
        "ProjectConfigList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of ProjectConfig(s).",
                  "items": {
                    "$ref": "#/components/schemas/ProjectConfig"
                  }
                }
              }
            }
          ]
        },
        "Project": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.project"
              ]
            },
            "id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/project_id"
                }
              ]
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ],
              "description": "The Unix timestamp of the Project creation time. This is not provided for 3rd party Projects."
            },
            "owner_id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/user_id"
                }
              ],
              "description": "The auth user ID of the Project owner. This is not provided for 3rd party Projects."
            },
            "owner_email": {
              "type": "string",
              "format": "email",
              "description": "The email of the Project owner. This is not provided for 3rd party Projects."
            },
            "builder_name": {
              "type": "string",
              "description": "The Project builder name as displayed on ChatGPT.",
              "example": "Community Builder"
            },
            "sharing": {
              "type": "object",
              "description": "The sharing level of the Project. This is not provided for 3rd party Projects.",
              "properties": {
                "object": {
                  "type": "string",
                  "enum": [
                    "compliance.workspace.project.sharing"
                  ]
                },
                "visibility": {
                  "type": "string",
                  "description": "The visibility of the Project.",
                  "enum": [
                    "invite-only",
                    "workspace-with-link",
                    "workspace",
                    "anyone-with-link",
                    "gpt-store"
                  ]
                },
                "permissions": {
                  "type": "object",
                  "description": "The permissions of the Project.",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "compliance.workspace.project.permissions"
                      ]
                    },
                    "can_read": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can view/consume the Project."
                    },
                    "can_view_config": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can view the configurations of the Project."
                    },
                    "can_write": {
                      "type": "boolean",
                      "description": "Indicates whether the sharing recipient can edit the Project."
                    }
                  }
                },
                "recipients": {
                  "type": "array",
                  "description": "The list of sharing recipients.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "compliance.workspace.project.shared_user"
                        ]
                      },
                      "id": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/user_id"
                          }
                        ],
                        "description": "The auth user ID of the recipient."
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email of the recipient."
                      },
                      "permissions": {
                        "type": "object",
                        "description": "The permissions of the Project.",
                        "properties": {
                          "object": {
                            "type": "string",
                            "enum": [
                              "compliance.workspace.project.permissions"
                            ]
                          },
                          "can_read": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can view/consume the Project."
                          },
                          "can_view_config": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can view the configurations of the Project."
                          },
                          "can_write": {
                            "type": "boolean",
                            "description": "Indicates whether the sharing recipient can edit the Project."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "latest_config": {
              "$ref": "#/components/schemas/ProjectConfigList"
            }
          }
        },
        "CodexEnvironmentList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of CodexEnvironment(s).",
                  "items": {
                    "$ref": "#/components/schemas/CodexEnvironment"
                  }
                }
              }
            }
          ]
        },
        "CodexTaskList": {
          "allOf": [
            {
              "$ref": "#/components/schemas/GenericList"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "The list of CodexTask(s).",
                  "items": {
                    "$ref": "#/components/schemas/CodexTask"
                  }
                }
              }
            }
          ]
        },
        "CodexEnvironment": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.codex_environment"
              ]
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for a Codex execution environment."
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ]
            },
            "machine_id": {
              "type": "string"
            },
            "label": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "workspace_dir": {
              "type": "string",
              "nullable": true
            },
            "is_pinned": {
              "type": "boolean"
            },
            "repos": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "External repository ID (e.g., \"github:openai/chatgpt\")."
            },
            "setup": {
              "description": "Command(s) used to configure the environment container before first run.\nAccepts either a single shell command string or an ordered list of commands.\n",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "repo_map": {
              "type": "object",
              "nullable": true,
              "additionalProperties": {
                "type": "object",
                "description": "Git repository metadata.",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "HTTPS or SSH URL of the repository."
                  },
                  "branch": {
                    "type": "string",
                    "description": "Default branch checked out in the environment."
                  },
                  "commit": {
                    "type": "string",
                    "description": "Commit SHA captured in the environment snapshot."
                  }
                }
              }
            },
            "env_vars": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "secrets": {
              "type": "object",
              "nullable": true,
              "additionalProperties": {
                "type": "string"
              }
            },
            "task_count": {
              "type": "integer",
              "nullable": true
            },
            "creator_id": {
              "type": "string"
            },
            "share_settings": {
              "type": "string",
              "description": "Sharing visibility of the environment.\n"
            }
          }
        },
        "CodexTask": {
          "type": "object",
          "properties": {
            "object": {
              "type": "string",
              "enum": [
                "compliance.workspace.codex_task"
              ]
            },
            "id": {
              "type": "string"
            },
            "created_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ]
            },
            "updated_at": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/timestamp"
                }
              ]
            },
            "created_by_id": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/user_id"
                }
              ]
            },
            "title": {
              "type": "string"
            },
            "denormalized_metadata": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "responses": {
        "WorkspaceUserListResponse": {
          "description": "A list of workspace users.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "description": "The auth user ID of the last user in the list.",
                    "$ref": "#/components/schemas/user_id"
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more workspace users to list."
                  },
                  "data": {
                    "type": "array",
                    "description": "The workspace users.",
                    "items": {
                      "$ref": "#/components/schemas/WorkspaceUser"
                    }
                  }
                }
              }
            }
          }
        },
        "GPTConfigListResponse": {
          "description": "A list of GPT configurations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "type": "string",
                    "description": "The ID of the last GPT configuration in the list."
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more configurations to list."
                  },
                  "data": {
                    "type": "array",
                    "description": "The list of configurations.",
                    "items": {
                      "$ref": "#/components/schemas/GPTConfig"
                    }
                  }
                }
              }
            }
          }
        },
        "GPTResponse": {
          "description": "A GPT.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GPT"
              }
            }
          }
        },
        "ConversationListResponse": {
          "description": "A list of conversations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "type": "string",
                    "description": "The ID of the last conversation in the list."
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more conversations to list."
                  },
                  "data": {
                    "type": "array",
                    "description": "The list of conversations.",
                    "items": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          }
        },
        "GPTListResponse": {
          "description": "A list of GPTs.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "type": "string",
                    "description": "The ID of the last GPT in the list."
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more GPTs to list."
                  },
                  "data": {
                    "type": "array",
                    "description": "The list of GPTs.",
                    "items": {
                      "$ref": "#/components/schemas/GPT"
                    }
                  }
                }
              }
            }
          }
        },
        "MemoryListResponse": {
          "description": "A list of memories.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "last_id": {
                    "type": "string",
                    "description": "The ID of the last memory in the list."
                  },
                  "has_more": {
                    "type": "boolean",
                    "description": "Indicates whether there are more memories to list."
                  },
                  "data": {
                    "type": "array",
                    "description": "The list of memories.",
                    "items": {
                      "$ref": "#/components/schemas/Memory"
                    }
                  }
                }
              }
            }
          }
        },
        "DeletionResponse": {
          "description": "A response indicating the success of a deletion request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleted": {
                    "type": "boolean",
                    "description": "Indicates whether the deletion was successful."
                  },
                  "object": {
                    "type": "string",
                    "description": "The object type that was deleted."
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the object that was deleted."
                  }
                }
              }
            }
          }
        },
        "CanvasListResponse": {
          "description": "A list of canvases.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CanvasListResponse"
              }
            }
          }
        },
        "CanvasContentResponse": {
          "description": "The content of the canvas document.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CanvasContent"
              }
            }
          }
        }
      },
      "securitySchemes": {
        "chatgpt.enterprise.compliance_export": {
          "type": "http",
          "name": "Authorization",
          "in": "header",
          "scheme": "bearer",
          "bearerFormat": "sk-proj-XXXXXXXXXXXXXXXXXXXXXXXX"
        }
      }
    },
    "paths": {
      "/compliance/workspaces/{workspace_id}/conversations": {
        "get": {
          "summary": "List Conversations",
          "description": "Retrieve conversations from a workspace, ordered by last update time.\n\n### Pagination\n- Results are paginated using the `after` parameter to fetch subsequent pages.\n- Page size may vary due to internal factors; fewer results do not imply the end of available data.\n- Ensure deduplication of messages using `messageID` during pagination, as conversations may appear multiple times if updated between API calls.\n\n> **Note**: Conversation order by update time may differ from the value in `last_active_at`. Conversations might be updated without direct activity, for instance, when migrated from a personal workspace. Currently, the actual update timestamp isn't exposed as an API field.\n\n### Payload Size\n- Typical conversation size varies greatly, potentially ranging from KBs to ~2MB or more multiply that by every conversation you request.\n- Treat responses as potentially large files or very long strings, depending on your database schema.\n- Conversation size may increase further over time as the underlying data models evolve.\n- Enabling compression at your database or storage layer is strongly recommended.\n\nThe Compliance API does not strictly enforce a maximum payload size for responses. Practical limitations such as network timeouts or client-side capacity constraints might cause failed responses.\n\nGenerally, each conversation's payload is approximately **2MB**, subject to change, meaning total payload size can become large depending on how many conversations are requested.\n\n### Recommendations for Handling Large Payloads\n- Utilize the `limit` parameter to paginate data effectively, our service doesn't have issues with exporting a lot of conversations, but some users might.\n- Reduce `limit` values when encountering issues with payload size, for example, lowering from `limit=100` to `limit=50` especially if your client is RAM-limited.\n- If you have issues, you can implement an exponential back-off strategy to dynamically manage your `limit` parameter based on request successes or failures, especially under network limitations or after encountering rate-limit errors (`HTTP 429`).\n",
          "tags": [
            "Conversations"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "since_timestamp",
              "in": "query",
              "description": "When present, results will be limited to conversations last updated at or later than the provided Unix timestamp.\n\nCannot be used together with `after`. Providing both parameters results in an error.\n\n*Note: The filtering of conversations based on update time does not necessarily match `last_active_at`.\nConversations can be updated without being active,\nsuch as when migrated from a personal workspace.\nAt this time, last update time is not exposed as a field.*\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous conversation ID from which to fetch the next page of conversations.\nThe endpoint will return the next conversations that would come after the conversation identified by `after`.\n\nCannot be used together with `since_timestamp`. Providing both parameters results in an error.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The number of conversations to list.  The maximum number of conversations that can be returned is 500.  The default is 500.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "users",
              "in": "query",
              "description": "If specified, only list conversations for these users.\nCan be specified multiple times.\n\nExample:\n\n```\n/compliance/workspaces/{workspace_id}/conversations?after=1234&users=user-1&users=user-2&users=user-3\n```\n\nMust be less than 100 total users.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/conversation_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/ConversationListResponse"
            },
            "404": {
              "description": "An identifying parameter was not found (`workspace_id`, etc.)."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/conversations/{conversation_id}": {
        "delete": {
          "summary": "Delete Conversation",
          "description": "This deletes the conversation title, messages, files, and shared links from the workspace.\nThe conversation history pane will continue to list a placeholder with the title \"(Removed by your admin)\"\nand ordered based on the last updated date of the deleted conversation. Users cannot interact with this placeholder.\nThe placeholder will expire (and be removed from the history pane) within 30 days of conversation deletion.\n",
          "tags": [
            "Conversations"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "conversation_id",
              "in": "path",
              "description": "The ID of the conversation to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The conversation or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/gpts": {
        "get": {
          "summary": "List GPTs",
          "description": "List workspace GPTs. This API can return any *live* workspace GPT, regardless of sharing level.\nThis will not list 3rd party GPTs, even those that are approved for use in the workspace.\nIt will not return *draft* GPTs.  A draft GPT is one where the creator may have added configurations\nbut has not clicked `Create`.\nNote: 'community builder' is the default placeholder builder_name for hidden names or not verified\n[builder profiles](https://help.openai.com/en/articles/8798878-building-and-publishing-a-gpt);\nyou can use the owner_id or email to find the user.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous GPT ID from which to fetch the next page of GPTs.  The endpoint will return\nthe next GPTs that would come after the GPT identified by `after`.  Used for pagination.\nIf `after` is not provided, the first page of GPTs is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of GPTs to list.  The default is 20.  Note that this may return fewer\nthan the provided `limit`.  Use the `has_more` response field to determine if there are\nmore GPTs to list.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/gpt_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/GPTListResponse"
            },
            "404": {
              "description": "An identifying parameter was not found (`workspace_id`, etc.)."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/gpts/{gpt_id}": {
        "get": {
          "summary": "Get GPT",
          "description": "Get a GPT by ID.  If the request specifies a 3rd party GPT, this will only succeed if the GPT\nis published publicly.  For 3rd party GPTs, the returned data will only contain publicly available\ninformation.  This API can return any *live* workspace GPT, regardless of sharing level.\nIt will not return *draft* GPTs.  A draft GPT is one where the creator may have added configurations\nbut has not clicked `Create`.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT to retrieve.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/gpt_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/GPTResponse"
            },
            "404": {
              "description": "The GPT or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Delete GPT",
          "description": "This deletes the GPT from the workspace, including all associated files; it does not delete all Conversations which used the GPT.\nIn the case where the files in a deleted GPT are referenced by another GPT, the files are not deleted.\nThis can happen, for example, if GPT A is created with files, then GPT B is created as a copy of GPT A.\nFor immediate deletion of GPT files, use the dedicated endpoint.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The GPT or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/gpts/{gpt_id}/configs": {
        "get": {
          "summary": "Get GPT Configurations",
          "description": "List all versions of configurations for the GPT in descending order of updated time.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous configuration ID from which to fetch the next page of configurations.\nThe endpoint will return the next configurations that would come after the configuration\nidentified by `after`.  Used for pagination.  If `after` is not provided, the first page\nof configurations is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of configurations to list.  The default is 20.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/gpt_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/GPTConfigListResponse"
            },
            "404": {
              "description": "An identifying parameter was not found (`workspace_id`, etc.)."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/gpt_files/{file_id}": {
        "get": {
          "summary": "Get GPT File Content",
          "description": "Get the content of a GPT file.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to fetch.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "307": {
              "description": "This API endpoint issues a 307 redirect to a file download URL specified in the Location header. The provided URL will serve the file for download."
            },
            "404": {
              "description": "The file is not found for GPTs in this workspace."
            },
            "410": {
              "description": "The file has expired, and the content is no longer available."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per api key."
            }
          }
        }
      },
      "/compliance/workspaces/{workspace_id}/gpts/{gpt_id}/files/{file_id}": {
        "delete": {
          "summary": "Delete GPT File",
          "description": "This deletes the GPT file from the workspace. The file reference is also deleted from all\nGPTs in the workspace. This applies only to files uploaded during GPT creation.\nFiles generated during a conversation with a custom GPT should use the user-owned file deletion\nendpoint. After the file is deleted, it is replaced with a virtual placeholder file with the\ntitle \"(Removed by your admin)\" and no content.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The GPT, file, or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/gpts/{gpt_id}/shared_users": {
        "get": {
          "summary": "List GPT Shared Users",
          "description": "Lists directly shared users for the GPT in ascending order of the `user_id`.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous user ID from which to fetch the next page of shared users.\nThe endpoint will return the next shared users that would come after the user identified by `after`.\nUsed for pagination.  If `after` is not provided, the first page of shared users is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/WorkspaceUserListResponse"
            },
            "404": {
              "description": "The GPT or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Isolate GPT",
          "description": "This removes access to the GPT for all share recipients (users, groups, etc.). The GPT is\nstill available for use by the owner. This does not block the owner from sharing the GPT\nagain in the future.\n",
          "tags": [
            "GPTs"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "gpt_id",
              "in": "path",
              "description": "The ID of the GPT.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The GPT or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users": {
        "get": {
          "summary": "List Users",
          "description": "List workspace users in ascending order of `user_id`.\n",
          "tags": [
            "Users"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous user ID from which to fetch the next page of users.  The endpoint will return\nthe next users that would come after the user identified by `after`.  Used for pagination.\nIf `after` is not provided, the first page of users is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of users to list.  The default is 200.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/WorkspaceUserListResponse"
            },
            "404": {
              "description": "The workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/files/{file_id}": {
        "get": {
          "summary": "Get User File Content",
          "description": "Get the content of a user-owned file.\n",
          "tags": [
            "Users"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The auth user ID of the user who owns the file.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to fetch.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "conversation_id",
              "in": "query",
              "description": "The ID of the conversation to fetch the file from. Required for audio and video files",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "307": {
              "description": "This API endpoint issues a 307 redirect to a file download URL specified in the Location header. The provided URL will serve the file for download."
            },
            "404": {
              "description": "The file is not found for the requested workspace user."
            },
            "410": {
              "description": "The file has expired, and the content is no longer available."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per api key."
            }
          }
        },
        "delete": {
          "summary": "Delete User-Owned File",
          "description": "This deletes the specified user-owned file from the workspace. Any conversations that reference this\ncontinue to reference the file ID, but the file is no longer available for download or\nretrieval. No conversation messages are changed when this file is deleted. This applies to\nboth uploaded and generated files, including files that are generated in a conversation with\na custom GPT.\n\nPlease note that the model may have chosen to insert part of the file into\nthe context of a conversation; these stuffed snippets will NOT be deleted.\nYou can discover such conversations using the List Conversations Endpoint,\nand searching for usages of the myfiles_browser GPT tool.\n",
          "tags": [
            "Users"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user who uploaded the file.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "conversation_id",
              "in": "query",
              "description": "The ID of the conversation to delete the file from. Required for audio and video files",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The user, file, or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/memories": {
        "get": {
          "summary": "List Memories",
          "description": "List workspace memories in ascending order of `user_id`.\n",
          "tags": [
            "Memories"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous user ID from which to fetch the next page of memories.\nThe endpoint will return the next memories that would come after the user identified by `after`.\nUsed for pagination.  If `after` is not provided, the first page of memories is returned.\n",
              "required": false,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of memories to list.  The default and maximum are 200.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "since_timestamp",
              "in": "query",
              "description": "The Unix timestamp from which to fetch memories (inclusive).\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/MemoryListResponse"
            },
            "404": {
              "description": "The workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          }
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/memories": {
        "get": {
          "summary": "List User Memories",
          "description": "Gets memories of the specified workspace user.\n",
          "tags": [
            "Memories"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "since_timestamp",
              "in": "query",
              "description": "The Unix timestamp from which to fetch memories (inclusive).\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/MemoryListResponse"
            },
            "404": {
              "description": "The user or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/memory_contexts/{memory_context_id}/memories/{memory_id}": {
        "delete": {
          "summary": "Delete Memory Entry",
          "description": "This deletes a memory entry for one workspace user.\n",
          "tags": [
            "Memories"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "memory_context_id",
              "in": "path",
              "description": "The ID of the memory context object. Note that this could be a user ID if it refers to the user's primary memory context.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "memory_id",
              "in": "path",
              "description": "The ID of the memory to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The user or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/canvases": {
        "get": {
          "summary": "List User Canvases",
          "description": "List the canvases of a workspace user in ascending order of creation timestamp.\n",
          "tags": [
            "Canvases"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of canvases to list. The default and maximum are 30.\n",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 30
              },
              "example": 30
            },
            {
              "name": "after",
              "in": "query",
              "description": "The ID of the last canvas from the previous response. Used for pagination.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/CanvasListResponse"
            },
            "404": {
              "description": "The user or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/canvas/{textdoc_id}": {
        "get": {
          "summary": "Get Canvas Content",
          "description": "Gets the content of a canvas document for a workspace user. The result will include multiple versions\nof the canvas document in ascending order of creation timestamp.\n",
          "tags": [
            "Canvases"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "textdoc_id",
              "in": "path",
              "description": "The ID of the canvas document.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of versions to list. The default and maximum are 30.\n",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 30
              },
              "example": 30
            },
            {
              "name": "after",
              "in": "query",
              "description": "The version number from which to fetch the next page of versions.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/CanvasContentResponse"
            },
            "404": {
              "description": "The canvas, user, or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Delete Canvas Text Document",
          "description": "Deletes a canvas text document for a workspace user.\n",
          "tags": [
            "Canvases"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "textdoc_id",
              "in": "path",
              "description": "The ID of the canvas document to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The canvas, user, or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/projects": {
        "get": {
          "summary": "List Projects",
          "description": "List workspace Projects. This API can return any *live* workspace Project, regardless of sharing level.\nIt will not return *draft* Projects.  A draft Project is one where the creator may have added configurations\nbut has not clicked `Create`.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous Project ID from which to fetch the next page of Projects.\nThe endpoint will return the next Projects that would come after the Project identified by `after`.\nUsed for pagination.  If `after` is not provided, the first page of Projects is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of Projects to list.  The default is 20.\nNote that this may return fewer than the provided `limit`.\nUse the `has_more` response field to determine if there are more Projects to list.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/project_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Projects.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "last_id": {
                        "type": "string",
                        "description": "The ID of the last Project in the list."
                      },
                      "has_more": {
                        "type": "boolean",
                        "description": "Indicates whether there are more Projects to list."
                      },
                      "data": {
                        "type": "array",
                        "description": "The list of Projects.",
                        "items": {
                          "$ref": "#/components/schemas/Project"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "An identifying parameter was not found (`workspace_id`, etc.)."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/projects/{project_id}": {
        "get": {
          "summary": "Get Project",
          "description": "Get a Project by ID.  If the request specifies a 3rd party Project, this will only succeed if the Project\nis published publicly.  For 3rd party Projects, the returned data will only contain publicly available\ninformation.  This API can return any *live* workspace Project, regardless of sharing level.\nIt will not return *draft* Projects.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project to retrieve.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/project_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A Project.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "404": {
              "description": "The Project or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Delete Project",
          "description": "This deletes the Project from the workspace, including all associated files; it does not delete all Conversations that used the Project.\nIn the case where the files in a deleted Project are referenced by another Project, the files are not deleted.\nFor immediate deletion of Project files, use the dedicated endpoint.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The Project or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/projects/{project_id}/configs": {
        "get": {
          "summary": "Get Project Configurations",
          "description": "List all versions of configurations for the Project in descending order of updated time.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous configuration ID from which to fetch the next page of configurations.\nThe endpoint will return the next configurations that would come after the configuration\nidentified by `after`.  Used for pagination.\nIf `after` is not provided, the first page of configurations is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of configurations to list.  The default is 20.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "file_format",
              "in": "query",
              "schema": {
                "$ref": "#/components/schemas/project_file_format"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Project configurations.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "last_id": {
                        "type": "string",
                        "description": "The ID of the last Project configuration in the list."
                      },
                      "has_more": {
                        "type": "boolean",
                        "description": "Indicates whether there are more configurations to list."
                      },
                      "data": {
                        "type": "array",
                        "description": "The list of configurations.",
                        "items": {
                          "$ref": "#/components/schemas/ProjectConfig"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "An identifying parameter was not found (`workspace_id`, etc.)."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/project_files/{file_id}": {
        "get": {
          "summary": "Get Project File Content",
          "description": "Get the content of a Project file.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to fetch.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "307": {
              "description": "This API endpoint issues a 307 redirect to a file download URL specified in the Location header. The provided URL will serve the file for download."
            },
            "404": {
              "description": "The file is not found for Projects in this workspace."
            },
            "410": {
              "description": "The file has expired, and the content is no longer available."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per api key."
            }
          }
        }
      },
      "/compliance/workspaces/{workspace_id}/projects/{project_id}/files/{file_id}": {
        "delete": {
          "summary": "Delete Project File",
          "description": "This deletes the Project file from the workspace. The file reference is also deleted from all\nProjects in the workspace. This applies only to files uploaded during Project creation.\nFiles generated during a conversation with a custom Project should use the user-owned file deletion\nendpoint. After the file is deleted, it is replaced with a virtual placeholder file with the\ntitle \"(Removed by your admin)\" and no content.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "file_id",
              "in": "path",
              "description": "The ID of the file to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The Project, file, or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/projects/{project_id}/shared_users": {
        "get": {
          "summary": "List Project Shared Users",
          "description": "Lists directly shared users for the Project in ascending order of the `user_id`.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous user ID from which to fetch the next page of shared users.\nThe endpoint will return the next shared users that would come after the user identified by `after`.\nUsed for pagination.\nIf `after` is not provided, the first page of shared users is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Project shared users.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "last_id": {
                        "description": "The auth user ID of the last user in the list.",
                        "$ref": "#/components/schemas/user_id"
                      },
                      "has_more": {
                        "type": "boolean",
                        "description": "Indicates whether there are more shared users to list."
                      },
                      "data": {
                        "type": "array",
                        "description": "The shared users for this Project.",
                        "items": {
                          "$ref": "#/components/schemas/WorkspaceUser"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "The Project or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 50 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Isolate Project",
          "description": "This removes access to the Project for all share recipients (users, groups, etc.). The Project is\nstill available for use by the owner. This does not block the owner from sharing the Project\nagain in the future.\n",
          "tags": [
            "Projects"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "project_id",
              "in": "path",
              "description": "The ID of the Project.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The Project or workspace was not found."
            },
            "429": {
              "description": "Too many requests.  This endpoint is rate limited to 100 requests per minute per endpoint per api key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/workspaces/{workspace_id}/users/{user_id}/automations": {
        "get": {
          "summary": "List User Automations",
          "description": "Retrieves a paginated list of automations for the specified workspace user. You can filter by a Unix timestamp (since_timestamp) or use the `after` parameter to paginate through results.\n",
          "tags": [
            "Automations"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The workspace ID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The previous automation ID from which to fetch the next page of automations.  The endpoint will return the next automations that would come after the automation identified by `after`.  Used for pagination. If `after` is not provided, the first page of automations is returned.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "since_timestamp",
              "in": "query",
              "description": "When specified, only list automations updated after the given Unix timestamp. Can't set when `after` is already provided.\n",
              "required": false,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of automations to return. Must be between 1 and 100.\n",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 100
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of automations.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ExportAutomation"
                        }
                      },
                      "has_more": {
                        "type": "boolean",
                        "description": "Indicates if more automations are available for pagination."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request – invalid or conflicting parameters."
            },
            "404": {
              "description": "Workspace or user not found."
            },
            "429": {
              "description": "Too Many Requests – rate limit exceeded."
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/recordings": {
        "get": {
          "summary": "List User Recordings",
          "description": "List recordings for the specified workspace user.\n",
          "tags": [
            "Recordings"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "The maximum number of recordings to list. Default is 10.",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 20
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "The pagination cursor from a previous response.",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/RecordingListResponse"
            },
            "404": {
              "description": "The user or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/recordings/{recording_id}/transcript": {
        "get": {
          "summary": "Download Recording Transcript",
          "description": "Download the transcript for a recording. Optionally include the summary.\n",
          "tags": [
            "Recordings"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user who created the recording.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "recording_id",
              "in": "path",
              "description": "The ID of the recording.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "include_summary",
              "in": "query",
              "description": "Whether to include the summary.",
              "required": false,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TranscriptDownloadResponse"
                  }
                }
              }
            },
            "404": {
              "description": "The recording was not found."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/users/{user_id}/recordings/{recording_id}": {
        "delete": {
          "summary": "Delete Recording",
          "description": "Deletes the specified recording from the workspace.\n",
          "tags": [
            "Recordings"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user who created the recording.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/user_id"
              }
            },
            {
              "name": "recording_id",
              "in": "path",
              "description": "The ID of the recording to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The recording was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/workspaces/{workspace_id}/users/{user_id}/automations/{automation_id}": {
        "delete": {
          "summary": "Delete User Automation",
          "description": "Deletes the specified automation for the workspace user. This will delete the automation and stop future scheduled runs.\n",
          "tags": [
            "Automations"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The workspace ID.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "The ID of the user.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "automation_id",
              "in": "path",
              "description": "The ID of the automation to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Automation deleted successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/responses/DeletionResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Automation not found."
            },
            "429": {
              "description": "Too Many Requests – rate limit exceeded."
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/codex_tasks/{task_id}": {
        "get": {
          "summary": "Get Codex Task",
          "description": "Retrieves a single Codex code‑execution task by ID.\n",
          "tags": [
            "Codex Tasks"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "task_id",
              "in": "path",
              "description": "The ID of the Codex task to retrieve.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A Codex task.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CodexTask"
                  }
                }
              }
            },
            "404": {
              "description": "The Codex task or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Delete Codex Task",
          "description": "Deletes a Codex code‑execution task from the workspace.\nThis also deletes any associated execution artifacts.\nOnly enterprise admins with the **compliance_export:delete** scope can perform this action.\n",
          "tags": [
            "Codex Tasks"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "task_id",
              "in": "path",
              "description": "The ID of the Codex task to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The Codex task or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/codex_environments/{environment_id}": {
        "get": {
          "summary": "Get Codex Environment",
          "description": "Retrieves a single Codex execution environment by ID.\n",
          "tags": [
            "Codex Environments"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "environment_id",
              "in": "path",
              "description": "The ID of the Codex environment to retrieve.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A Codex environment.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CodexEnvironment"
                  }
                }
              }
            },
            "404": {
              "description": "The Codex environment or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        },
        "delete": {
          "summary": "Delete Codex Environment",
          "description": "Deletes a Codex execution environment from the workspace, including all state stored within the environment.\n",
          "tags": [
            "Codex Environments"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "environment_id",
              "in": "path",
              "description": "The ID of the Codex environment to delete.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "$ref": "#/components/responses/DeletionResponse"
            },
            "404": {
              "description": "The Codex environment or workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "delete"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/codex_environments": {
        "get": {
          "summary": "List Codex Environments",
          "description": "Lists Codex execution environments that belong to the workspace.\nResults are returned in descending order of creation time.\n",
          "tags": [
            "Codex Environments"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "after",
              "in": "query",
              "description": "The ID of the last environment from the previous page.\nResults start **after** this ID (cursor‑based pagination).\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of environments to return (default and max = 30).\n",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "example": 30
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Codex environments.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "has_more": {
                        "type": "boolean"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CodexEnvironment"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "The workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 50 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      },
      "/compliance/workspaces/{workspace_id}/codex_tasks": {
        "get": {
          "summary": "List Codex Tasks",
          "description": "Lists Codex code‑execution tasks that belong to the workspace in\ndescending order of `updated_at`.\n",
          "tags": [
            "Codex Tasks"
          ],
          "parameters": [
            {
              "name": "workspace_id",
              "in": "path",
              "description": "The ID of the workspace.",
              "required": true,
              "schema": {
                "$ref": "#/components/schemas/workspace_id"
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "Cursor that marks the starting point for the next page of results.\nUse the `cursor` field from the previous response.\n",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of tasks to return (default and max = 30).\n",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50
              },
              "example": 30
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Codex tasks.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "type": "string",
                        "enum": [
                          "list"
                        ]
                      },
                      "cursor": {
                        "type": "string",
                        "nullable": true,
                        "description": "Cursor for fetching the next page of results."
                      },
                      "has_more": {
                        "type": "boolean"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CodexTask"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "The workspace was not found."
            },
            "429": {
              "description": "Too many requests. This endpoint is rate‑limited to 100 requests per minute per API key."
            }
          },
          "security": [
            {
              "chatgpt.enterprise.compliance_export": [
                "read"
              ]
            }
          ]
        }
      }
    },
    "tags": [
      {
        "name": "Introduction",
        "description": "This API allows ChatGPT Enterprise administrators to observe and remove data from their ChatGPT Enterprise workspaces. It is intended for compliance, security, and data privacy use.  The delete endpoints are designed for spot deletion of data, not bulk deletion.  The get endpoints provide time-indexed access to ChatGPT Enterprise data.  Administrators can use it to retrieve this data for archival or Data Loss Prevention purposes as part of a compliance or security program.\n\nThis API is designed for regularly downloading data diffs to synchronize an offline database for data compliance, rather than mass export. The initial data sync will take longer, but subsequent syncs will be faster as only the diffs need to be downloaded.  The API is rate limited to prevent abuse.\n\nChatGPT conversations can grow over time as the user continues chatting in a conversation.  This API always returns the latest stored version of the conversation.  ChatGPT Enterprise Administrators can choose to store all versions that they retrieve, or only the latest, depending on the use case.\n\n*Note:* ChatGPT is a nascent product that will likely be updated significantly and frequently.  OpenAI will make every effort to provide as much notice as possible when this happens.  We encourage developers to build for flexibility to adapt to future changes.\n\n### Authentication\n1. Owners can generate an API key in the [OpenAI API Platform Portal](https://platform.openai.com/api-keys).\n   Note that the correct Organization must be selected when creating a key, corresponding to the\n   administered workspace.  Do not select the owner's personal organization.\n2. Create a new API key:\n    - Settings:  Default Project | All Permissions\n    - Note that this must be a new key.  Once the Compliance API scopes are granted, all other\n      scopes are revoked.\n    - Reminder:  This key can only be viewed/copied once.  Store it securely.\n3. Send an email to [support@openai.com](mailto:support@openai.com) with\n   (1) the last 4 digits of the API key,\n   (2) the Key Name,\n   (3) the Created By Name, and\n   (4) the requested scope (`read`, `delete` or both).\n4. Our team will verify the key and grant the requested Compliance API scopes.\n5. Administrators may now use this key or pass it to a partner for use with the Compliance API.\n6. Remember the base url is `https://api.chatgpt.com/v1/` for all requests below.\n\n### Retention\nDeleted data is not recoverable. This API does not provide the capability for deleting any data\nlogged for audit or security within OpenAI. All authenticated requests to this API are logged\nfor security and compliance purposes. When an item is deleted using this API, it is also removed\nfrom all internal search and retrieval indexes.  Data is retained internally for no greater than\n30 days following a deletion request.\n\n#### **Messages**\nThere are several ways messages can be edited/deleted in ChatGPT:\n- Workspace setting: Admins can set a retention setting for the entire workspace (minimum 90d).\n  Messages will be deleted N days after the last edit to the conversation (N set by Admins)\n  on a going forward basis.\n- User delete conversation: These conversations will still be available via this API for up to 30d\n  but not visible to the user.\n- User edit/delete message: These conversations will be shown via the API in the conversation tree\n  subject to the retention settings above\n\n#### **Files**\nThere are 4 different file retentions within ChatGPT:\n- GPT & Project Files: Files uploaded to GPTs/Projects are retained indefinitely since new conversations require them.\n- Chat Uploaded Files: Files uploaded by users are held temporarily (48hrs)\n- Generated Files: Files generated by ChatGPT (ie DALLE) are held based on the workspace's\n  retention setting\n\n### File URL Expiration\nFile URLs are generated each time the Compliance API is polled.\n- Files can be downloaded from these URLs, and for security reasons, they have an expiry of 1 hour.\n- For direct requests to fetch file contents, the redirect contains an ephemeral download URL which expires after 5 minutes.\n- Thus, if files are needed for compliance purposes, messages should be polled regularly (before their retention setting) and then downloaded soon after polling before the URL expires.\n\n### Implementation Tips\nCoding tip:\n- You can download the OpenAI Compliance Spec as a JSON file from the top of this page.\n- Using the JSON Spec File, you can ask ChatGPT to generate some starter code for you—using a reasoning model often yields the best results.\n- There are also various open source projects available (such as OpenAPI Gen, Swagger Autogen, and others) that have been developed by the community.\n- As always, we can't promise the accuracy of 3rd-party tools or auto-generated code, so always double-check the values returned are as expected 😀.\n\n```\n# You should probably autogen or get ChatGPT to help as mentioned above, but here's some examples.\n# 🗨️ Curl (no pagination) Example for Projects\ncurl -H \"Authorization: Bearer {sk-proj-KEY-HERE}\" \"https://api.chatgpt.com/v1/compliance/workspaces/{INPUT_WORKSPACE_HERE}/projects\"\n\n# 🗨️ Python Basic (no pagination) for Projects\nimport requests\nurl = \"https://api.chatgpt.com/v1/compliance/workspaces/{INPUT_WORKSPACE_HERE}/projects\"\nheaders = {\"Authorization\": f\"Bearer {sk-proj-KEY-HERE}\"}\nresponse = requests.get(url, headers=headers)\n# Add code to loop until has_more is false, using after to get the next page of projects\n# If 429/rate limit, slow down and try again.\n```\n\nCommon Mistakes:\n- Make sure to use \"has_more\" & \"after\"/\"since_timestamp\" or similar pagination logic to page through the list of items.\n- Make sure to use either `after` or `since_timestamp`. Including both parameters will result in an error.\n- If you hit the API too fast, you may get a 429 rate-limit error. Just slow down and try again.\n- Using `api.openai.com` instead of `api.chatgpt.com` can cause a 404 error.\n"
      },
      {
        "name": "Users",
        "description": "Endpoints for exporting ChatGPT Enterprise workspace user data."
      },
      {
        "name": "Conversations",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace conversations.\n\n*Common Tools*\n- **Canvases** (*The popout window in a conversation*) are sometimes related to conversations, but not technically required; so this should be kept in mind when exporting data there is a canvas admin endpoint as well. See `Canvases` Tab for details.\n- **Deep Research** [Filter by tool_name = 'deep_research' to find the response to the user] when used will add its final user-facing response to the conversation it was initiated from once completed, and there will also be a new background conversation(s) created (hidden from the user, but visible to you) that contains the user's prompt as well as OpenAI's deep research template prompt which is sent to the background worker.\n    In the conversation API the background and primary conversation will be also listed under the user's ID.\n-  Example Flow of Deep Research: (Deep Research Request -> Starts Background Conversation with Prompt [5-30 minute wait] -> Adds Response to User's Conversation). Background conversations typically have identical opening messages in their prompts, though this may evolve over time as we refine the prompt.\n"
      },
      {
        "name": "Canvases",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace canvases.\n- Note, Canvases (*The popout window in a conversation*) are sometimes related to conversations, but not technically required; so this should be kept in mind when exporting data.\n"
      },
      {
        "name": "GPTs",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace GPTs. **Note, they have a very similar structure to Projects**; this should help with implementation."
      },
      {
        "name": "Projects",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace Projects. **Note, they have a very similar structure to GPTs**; this should help with implementation. Initially, they were built on top of GPTs, but in the future, they might have additional features."
      },
      {
        "name": "Memories",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace Memories."
      },
      {
        "name": "Automations",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace Automations."
      },
      {
        "name": "Codex Tasks",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace Codex tasks."
      },
      {
        "name": "Codex Environments",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace Codex environments."
      },
      {
        "name": "Recordings",
        "description": "Endpoints for exporting and spot-deleting ChatGPT Enterprise workspace recordings."
      },
      {
        "name": "Version History",
        "description": "### 1.1.5\n*2025-06-10*\n- Added compliance API support for recording endpoints.\n\n### 1.1.4\n*2025-05-16*\n- Added compliance API support for Codex endpoints.\n\n### 1.1.3\n*2025-03-18*\n- Added compliance API support for Automations endpoints.\n\n### 1.1.2\n- Added Deep Research as an explicit tool name 'deep_research' to the Conversation API. Based on user feedback, instead of looking for the prompt in the message history, you can now look for the tool name.\n\n### 1.1.1\n*2025-02-18*\n- Added version author to GPT Configurations endpoint.\n- Added notes for Deep Research, but it uses the Conversation API. So no extra work should be needed for support.\n\n### 1.1.0\n*2025-01-15*\n- Added Project endpoints.\n\n*2024-12-17*\n- Added Canvas Endpoints.\n\n*2024-06-24*\n- Added Memory Endpoints.\n\n*2024-06-11*\n- Created endpoints for exporting and deleting memories. Also created delete endpoints for\n  User Files, GPT Files, GPTs, and Conversations.\n\n### [1.0.0](https://docs.google.com/document/d/157SnVe5dPvHSvC67hwrberxLC-TcM34DFspO4eSEjnQ)\n*2024-04-30*\n\nInitial version of the Enterprise Compliance API, including only data export endpoints for conversations, GPTs,\nGPT Configurations, and Workspace Users.\n"
      }
    ]
  }